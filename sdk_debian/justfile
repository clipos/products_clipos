# SPDX-License-Identifier: LGPL-2.1-or-later
# Copyright Â© 2017-2018 ANSSI. All rights reserved.

product = "clipos"
recipe = "sdk_debian"

# Pipeline all the actions to produce the final result of this recipe
all: bootstrap

# Bootstrap from scratch
bootstrap-from-scratch: clear-cache rootfs bootstrap

rootfs:
    #!/usr/bin/env bash
    repo_root="$(cosmk repo-root-path)"

    echo "[*] Initial cleanup"
    rm -rf \
        "${repo_root}/assets/debian/cache" \
        "${repo_root}/assets/debian/rootfs" \
        "${repo_root}/assets/debian/rootfs-"*".tar.xz" \
        "${repo_root}/assets/debian/src"
    mkdir "${repo_root}/assets/debian/cache"

    echo "[*] Running debootstrap"
    # Explicit inclusion of perl-openssl-defaults is required as debootstrap
    # does not properly resolve dependencies on virtual packages:
    # https://groups.google.com/forum/#!topic/linux.debian.maint.boot/cI9Yy5Yt5ak
    debootstrap \
        --arch=amd64 \
        --force-check-gpg \
        --cache-dir="${repo_root}/assets/debian/cache" \
        --include=perl-openssl-defaults,libguestfs-tools,linux-image-amd64,busybox \
        --variant=minbase \
        stable \
        "${repo_root}/assets/debian/rootfs" \
        http://debian.mirrors.ovh.net/debian/

    echo "[*] Creating rootfs tarball"
    tar --create --preserve-permissions --xz \
        --file "${repo_root}/assets/debian/rootfs-$(date --iso-8601).tar.xz" \
        --directory "${repo_root}/assets/debian/rootfs" \
        .
    echo "[*] Fixing permissions"
    fixup_uid="$(stat -c '%u' ${repo_root}/assets/debian)"
    fixup_gid="$(stat -c '%g' ${repo_root}/assets/debian)"
    chown "${fixup_uid}:${fixup_gid}" -R \
        "${repo_root}/assets/debian/cache" \
        "${repo_root}/assets/debian/rootfs-"*.tar.xz

    echo "[*] Removing temporary rootfs"
    rm -rf "${repo_root}/assets/debian/rootfs"

    echo "[*] Creating generic symlink for rootfs"
    ln -sf "${repo_root}/assets/debian/rootfs-$(date --iso-8601).tar.xz" "${repo_root}/assets/debian/rootfs-latest.tar.xz"

    echo "[*] Done"

clear-rootfs:
    #!/usr/bin/env bash
    repo_root="$(cosmk repo-root-path)"
    rm -rf \
        "${repo_root}/assets/debian/rootfs" \
        "${repo_root}/assets/debian/rootfs-$(date --iso-8601).tar.xz"

# bootstrap the binary packages necessary to build the rootfs of this recipe
bootstrap:
    #!/usr/bin/env bash
    repo_root="$(cosmk repo-root-path)"
    version="$(cosmk product-version {{product}})"
    if [[ ! -f "${repo_root}/cache/{{product}}/${version}/{{recipe}}/rootfs.squashfs" ]]; then
        cosmk bootstrap "{{product}}/{{recipe}}"
    fi

# Clear the SDK squashfs. The next bootstrap run will then rebuild the SDK from
# cached binary packages.
clear:
    #!/usr/bin/env bash
    repo_root="$(cosmk repo-root-path)"
    version="$(cosmk product-version {{product}})"
    rm -f "${repo_root}/cache/{{product}}/${version}/{{recipe}}/rootfs.squashfs"

# Clear the binary package cache used during the "bootstrap" action step. This
# will force the bootstrap from scratch of all the packages on the next run of
# the "bootstrap" action step.
clear-cache:
    #!/usr/bin/env bash
    repo_root="$(cosmk repo-root-path)"
    version="$(cosmk product-version {{product}})"
    rm -rf "${repo_root}/cache/{{product}}/${version}/{{recipe}}"

# vim: set ts=4 sts=4 sw=4 et ft=make:
